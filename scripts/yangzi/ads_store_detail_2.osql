--name:yangzi_test
--author:yangyijing
--create time:2019-09-26 14:06

CREATE TABLE IF NOT EXISTS ads_store_detail_2(
	avgHyXszb             DOUBLE COMMENT '平均会员销售占比：会员实际销售金额/单数（单数改为：实际销售金额）',
	avgJdj                DOUBLE COMMENT '平均件单价：实际销售金额/件数',
	avgKdj                DOUBLE COMMENT '平均客单价：实际销售金额/单数',
	avgOrderQuantity      INT COMMENT '平均单数  （如何平均）',
	avgSu                 DOUBLE COMMENT '平均连带率：件数/单数',
	avgVipXszb            DOUBLE COMMENT '平均VIP销售占比：VIP实际销售金额/单数（单数改为：实际销售金额）',
	hyXszb                DOUBLE COMMENT '会员销售占比：会员实际销售金额/单数（单数改为：实际销售金额）',
	maxHyXszb             DOUBLE COMMENT '最大会员销售占比：会员实际销售金额/单数（VIP和会员有无区别？）',
	maxJdj                DOUBLE COMMENT '最大l件单价：实际销售金额/件数',
	maxKdj                DOUBLE COMMENT '最大客单价：实际销售金额/单数',
	maxOrderQuantity      INT COMMENT '最大单数',
	maxSu                 DOUBLE COMMENT '最大连带率：件数/单数',
	maxVipXszb            DOUBLE COMMENT '最大VIP销售占比：VIP实际销售金额/单数（单数改为：实际销售金额）'
)
COMMENT '门店明细表' PARTITIONED BY(
	ds STRING COMMENT '时间分区');
--new
SELECT sale_amt.real_store_code
,
			 sale_amt.real_store_id
,
			 sale_amt--实际销售金额
,
			 member_sale_amt--会员实际销售金额
,
			 vip_sale_amt--vip实际销售金额
,
			 pro_cnt--销售件数
,
			 vip_pro_cnt --vip销售件数
,
			 order_cnt--销售单数
,
			 vip_cnt--vip销售单数
FROM (
	SELECT a.real_store_code,
				 a.real_store_id
	--目标金额
	,
				 coalesce(sale_amt, 0) - coalesce(amt_pay, 0) AS sale_amt--实际销售金额
	,
				 coalesce(member_sale_amt, 0) - coalesce(amt_pay_member, 0) AS member_sale_amt--会员实际销售金额
	,
				 coalesce(vip_sale_amt, 0) - coalesce(amt_pay_vip, 0) AS vip_sale_amt--vip实际销售金额
	FROM (
		SELECT rs_r.store_code AS real_store_code
		,
					 rs_r.id AS real_store_id
		,
					 sum(CASE
					 WHEN mgi.is_vip = 1 THEN so.amt_total
					 END) AS vip_sale_amt --vip销售金额
		,
					 sum(so.amt_total) AS sale_amt --销售金额
		,
					 sum(CASE
					 WHEN so.member_no != - 1 THEN so.amt_total
					 END) AS member_sale_amt--会员销售金额
		FROM (
			SELECT member_no,
						 amt_total,
						 channel_endpoint_code,
						 org_code,
						 member_grade_code
			FROM ods_sales_order
			WHERE ds = '20190920') so
		--left join ods_channel_endpoint ce_r on so.channel_endpoint_code = ce_r.channel_endpoint_code and ce_r.ds = '20190920'
		--left join ods_endpoint e_r on ce_r.endpoint_code = e_r.endpoint_code and e_r.ds = '20190920'
		--left join ods_real_store rs_r on e_r.entity_code = rs_r.store_code and rs_r.ds = '20190920'

			JOIN ods_real_store rs_r
				ON so.channel_endpoint_code = rs_r.store_code AND rs_r.ds = '20190920'


			LEFT JOIN ods_member_grade_info mgi
				ON so.member_grade_code = mgi.grade_code AND mgi.ds = '20190920'
		GROUP BY rs_r.store_code
		, rs_r.id
	) a
		LEFT JOIN (
			SELECT rs_r.store_code AS real_store_code
			,
						 rs_r.id AS real_store_id
			,
						 sum(CASE
						 WHEN mgi.is_vip = 1 THEN sop.amt_pay
						 END) AS amt_pay_vip
			,
						 sum(CASE
						 WHEN so.member_no != - 1 = TRUE THEN sop.amt_pay
						 END) AS amt_pay_member
			,
						 sum(sop.amt_pay) AS amt_pay
			FROM (
				SELECT amt_pay,
							 sales_order_no,
							 pay_way
				FROM ods_sales_order_payment
				WHERE ds = '20190920') sop
				LEFT JOIN (
					SELECT member_no,
								 member_grade_code,
								 org_code,
								 channel_endpoint_code,
								 sales_order_no
					FROM ods_sales_order
					WHERE ds = '20190920') so
					ON sop.sales_order_no = so.sales_order_no
				LEFT JOIN (
					SELECT grade_code,
								 is_vip
					FROM ods_member_grade_info
					WHERE ds = '20190920') mgi
					ON so.member_grade_code = mgi.grade_code
			--left join ods_channel_endpoint ce_r on so.channel_endpoint_code = ce_r.channel_endpoint_code
			--and ce_r.ds = '20190920'
			--left join ods_endpoint e_r on ce_r.endpoint_code = e_r.endpoint_code and e_r.ds = '20190920'
			--left join ods_real_store rs_r on e_r.entity_code = rs_r.store_code and rs_r.ds = '20190920'
				JOIN ods_real_store rs_r
					ON so.channel_endpoint_code = rs_r.store_code AND rs_r.ds = '20190920'
			WHERE sop.pay_way = 'COUPON'
			GROUP BY rs_r.store_code
			, rs_r.id
		) b
			ON a.real_store_id = b.real_store_id
) sale_amt
	LEFT OUTER JOIN (
		SELECT rs_r.store_code AS real_store_code
		,
					 rs_r.id AS real_store_id
		,
					 sum(soi.qty_product) AS pro_cnt--销售件数
		,
					 sum(CASE
					 WHEN mgi.is_vip = 1 THEN soi.qty_product
					 END) AS vip_pro_cnt
		FROM (
			SELECT qty_product,
						 sales_order_no,
						 price_discount
			FROM ods_sales_order_item
			WHERE ds = '20190920') soi
			LEFT JOIN (
				SELECT channel_endpoint_code,
							 sales_order_no,
							 member_grade_code
				FROM ods_sales_order
				WHERE ds = '20190920') so
				ON soi.sales_order_no = so.sales_order_no
			LEFT JOIN (
				SELECT is_vip,
							 grade_code
				FROM ods_member_grade_info
				WHERE ds = '20190920') mgi
				ON so.member_grade_code = mgi.grade_code
		--left join ods_channel_endpoint ce_r on so.channel_endpoint_code = ce_r.channel_endpoint_code
		--and ce_r.ds = '20190920'
		--left join ods_endpoint e_r on ce_r.endpoint_code = e_r.endpoint_code and e_r.ds = '20190920'
		--left join ods_real_store rs_r on e_r.entity_code = rs_r.store_code and rs_r.ds = '20190920'
			JOIN ods_real_store rs_r
				ON so.channel_endpoint_code = rs_r.store_code AND rs_r.ds = '20190920'
		WHERE soi.price_discount > 0 AND soi.qty_product > 0
		GROUP BY rs_r.store_code
		, rs_r.id
	) pro_cnt
		ON sale_amt.real_store_id = pro_cnt.real_store_id
	LEFT OUTER JOIN (
		SELECT rs_r.store_code AS real_store_code
		,
					 rs_r.id AS real_store_id
		,
					 COUNT(1) AS order_cnt--销售单数
		,
					 sum(CASE
					 WHEN mgi.is_vip = 1 THEN 1
					 END) AS vip_cnt--vip销售单数
		--,      sum(case
		--when so.member_no != -1 then 1
		--end) as member_cnt--会员销售单数
		FROM (
			SELECT org_code,
						 channel_endpoint_code,
						 member_no,
						 order_type,
						 amt_total,
						 qty_order_item,
						 member_grade_code
			FROM ods_sales_order
			WHERE ds = '20190920') so
			LEFT JOIN (
				SELECT is_vip,
							 grade_code
				FROM ods_member_grade_info
				WHERE ds = '20190920') mgi
				ON so.member_grade_code = mgi.grade_code
		--left join ods_channel_endpoint ce_r on so.channel_endpoint_code = ce_r.channel_endpoint_code
		--and ce_r.ds = '20190920'
		--left join ods_endpoint e_r on ce_r.endpoint_code = e_r.endpoint_code and e_r.ds = '20190920'
		--left join ods_real_store rs_r on e_r.entity_code = rs_r.store_code and rs_r.ds = '20190920'
			JOIN ods_real_store rs_r
				ON so.channel_endpoint_code = rs_r.store_code AND rs_r.ds = '20190920'
		WHERE so.order_type IN ('101', '103')
		OR (so.order_type = '104' AND (so.amt_total != 0 OR (so.amt_total = 0 AND so.qty_order_item != 0)))
		GROUP BY rs_r.store_code
		, rs_r.id
	) order_cnt
		ON sale_amt.real_store_id = order_cnt.real_store_id;


--old
CREATE TABLE IF NOT EXISTS ads_store_detail_2(
	avgHyXszb             DOUBLE COMMENT '平均会员销售占比：会员实际销售金额/单数（单数改为：实际销售金额）',
	avgJdj                DOUBLE COMMENT '平均件单价：实际销售金额/件数',
	avgKdj                DOUBLE COMMENT '平均客单价：实际销售金额/单数',
	avgOrderQuantity      INT COMMENT '平均单数  （如何平均）',
	avgSu                 DOUBLE COMMENT '平均连带率：件数/单数',
	avgVipXszb            DOUBLE COMMENT '平均VIP销售占比：VIP实际销售金额/单数（单数改为：实际销售金额）',
	hyXszb                DOUBLE COMMENT '会员销售占比：会员实际销售金额/单数（单数改为：实际销售金额）',
	maxHyXszb             DOUBLE COMMENT '最大会员销售占比：会员实际销售金额/单数（VIP和会员有无区别？）',
	maxJdj                DOUBLE COMMENT '最大l件单价：实际销售金额/件数',
	maxKdj                DOUBLE COMMENT '最大客单价：实际销售金额/单数',
	maxOrderQuantity      INT COMMENT '最大单数',
	maxSu                 DOUBLE COMMENT '最大连带率：件数/单数',
	maxVipXszb            DOUBLE COMMENT '最大VIP销售占比：VIP实际销售金额/单数（单数改为：实际销售金额）'
)
COMMENT '门店明细表' PARTITIONED BY(
	ds STRING COMMENT '时间分区');


SELECT channel_endpoint_code
,
			 sale_amt AS salesAmount
,
			 pro_cnt AS itemQuantity
,
			 Jdj
,
			 Kdj
,
			 OrderQuantity
,
			 Su
,
			 avg(HyXszb)OVER (PARTITION BY org_code) AS avgHyXszb
,
			 avg(Jdj)OVER (PARTITION BY org_code) AS avgJdj
,
			 avg(Kdj)OVER (PARTITION BY org_code) AS avgKdj
,
			 avg(OrderQuantity)OVER (PARTITION BY org_code) AS avgOrderQuantity
,
			 avg(Su)OVER (PARTITION BY org_code) AS avgSu
,
			 avg(Xszb)OVER (PARTITION BY org_code) AS avgXszb
,
			 HyXszb AS hyXszb
,
			 max(HyXszb)OVER (PARTITION BY org_code) AS maxHyXszb
,
			 max(Jdj)OVER (PARTITION BY org_code) AS maxJdj
,
			 max(Kdj)OVER (PARTITION BY org_code) AS maxKdj
,
			 max(OrderQuantity)OVER (PARTITION BY org_code) AS maxOrderQuantity
,
			 max(Su)OVER (PARTITION BY org_code) AS maxSu
,
			 max(Xszb)OVER (PARTITION BY org_code) AS maxXszb
FROM (
	SELECT sale_amt.org_code,
				 sale_amt.channel_endpoint_code
	,
				 IF(sale_amt.sale_amt IS NULL OR sale_amt.sale_amt == '' OR sale_amt.sale_amt == 0, 0, (sale_amt.member_sale_amt
				 / sale_amt.sale_amt)) AS HyXszb--是否保留小数？
	,
				 IF(pro_cnt.pro_cnt IS NULL OR pro_cnt.pro_cnt == '' OR pro_cnt.pro_cnt == 0, 0, (sale_amt.sale_amt / pro_cnt.
				 pro_cnt)) AS Jdj
	,
				 IF(order_cnt.order_cnt IS NULL OR order_cnt.order_cnt == '' OR order_cnt.order_cnt == 0, 0, (sale_amt.sale_amt
				 /
				 order_cnt.order_cnt)) AS Kdj
	,
				 order_cnt.order_cnt AS OrderQuantity
	,
				 IF(order_cnt.order_cnt IS NULL OR order_cnt.order_cnt == '' OR order_cnt.order_cnt == 0, 0, (pro_cnt.pro_cnt /
				 order_cnt.order_cnt)) AS Su
	,
				 IF(sale_amt.sale_amt IS NULL OR sale_amt.sale_amt == '' OR sale_amt.sale_amt == 0, 0, (sale_amt.vip_sale_amt /
				 sale_amt.sale_amt)) AS Xszb
	,
				 sale_amt.sale_amt
	,
				 pro_cnt.pro_cnt
	FROM (
		SELECT a.org_code,
					 a.channel_endpoint_code
		,
					 sale_amt - amt_pay AS sale_amt--实际销售金额
		,
					 member_sale_amt - amt_pay_member AS member_sale_amt--会员实际销售金额
		,
					 vip_sale_amt - amt_pay_vip AS vip_sale_amt--vip实际销售金额
		FROM (
			SELECT so.org_code,
						 so.channel_endpoint_code
			,
						 sum(CASE
						 WHEN to_char(mgi.is_vip) = 1 THEN so.amt_total
						 END) AS vip_sale_amt --vip销售金额
			,
						 sum(so.amt_total) AS sale_amt --销售金额
			,
						 sum(CASE
						 WHEN so.member_no != - 1 THEN so.amt_total
						 END) AS member_sale_amt--会员销售金额
			FROM (
				SELECT member_no,
							 amt_total,
							 channel_endpoint_code,
							 org_code,
							 member_grade_code
				FROM ods_sales_order
				WHERE ds = '20190920') so
				LEFT JOIN (
					SELECT grade_code,
								 is_vip
					FROM ods_member_grade_info
					WHERE ds = '20190920') mgi
					ON so.member_grade_code = mgi.grade_code
			GROUP BY so.channel_endpoint_code, so.org_code
		) a
			LEFT JOIN (
				SELECT so.org_code
				,
							 so.channel_endpoint_code
				,
							 sum(CASE
							 WHEN to_char(mgi.is_vip) = 1 THEN sop.amt_pay
							 END) AS amt_pay_vip
				,
							 sum(CASE
							 WHEN so.member_no != - 1 = TRUE THEN sop.amt_pay
							 END) AS amt_pay_member
				,
							 sum(sop.amt_pay) AS amt_pay
				FROM (
					SELECT amt_pay,
								 sales_order_no,
								 pay_way
					FROM ods_sales_order_payment
					WHERE ds = '20190920') sop
					LEFT JOIN (
						SELECT member_no,
									 member_grade_code,
									 org_code,
									 channel_endpoint_code,
									 sales_order_no
						FROM ods_sales_order
						WHERE ds = '20190920') so
						ON sop.sales_order_no = so.sales_order_no
					LEFT JOIN (
						SELECT grade_code,
									 is_vip
						FROM ods_member_grade_info
						WHERE ds = '20190920') mgi
						ON so.member_grade_code = mgi.grade_code
				WHERE sop.pay_way = 'COUPON'
				GROUP BY so.org_code, so.channel_endpoint_code
			) b
				ON a.channel_endpoint_code = b.channel_endpoint_code
	) sale_amt
		LEFT OUTER JOIN (
			SELECT so.channel_endpoint_code
			,
						 sum(soi.qty_product) AS pro_cnt--销售件数
			--,sum(case when to_char(mgi.is_vip) = 1 then soi.qty_product end) as vip_pro_cnt
			FROM (
				SELECT qty_product,
							 sales_order_no,
							 price_discount
				FROM ods_sales_order_item
				WHERE ds = '20190920') soi
				LEFT JOIN (
					SELECT channel_endpoint_code,
								 sales_order_no,
								 member_grade_code
					FROM ods_sales_order
					WHERE ds = '20190920') so
					ON soi.sales_order_no = so.sales_order_no
			--left join (
			--  select is_vip, grade_code
			--  from ods_member_grade_info
			--  where ds = '20190920') mgi on so.member_grade_code = mgi.grade_code
			WHERE soi.price_discount > 0 AND soi.qty_product > 0
			GROUP BY so.channel_endpoint_code
		) pro_cnt
			ON sale_amt.channel_endpoint_code = pro_cnt.channel_endpoint_code

		LEFT OUTER JOIN (
			SELECT so.channel_endpoint_code
			,
						 COUNT(1) AS order_cnt--销售单数
			--,      sum(case
			--when to_char(mgi.is_vip) = 1 then 1
			--end) as vip_cnt--vip销售单数
			--,      sum(case
			--when so.member_no != -1 then 1
			--end) as member_cnt--会员销售单数
			FROM (
				SELECT org_code,
							 channel_endpoint_code,
							 member_no,
							 order_type,
							 amt_total,
							 qty_order_item,
							 member_grade_code
				FROM ods_sales_order
				WHERE ds = '20190920') so
			--left join (
			--  select is_vip, grade_code
			--  from ods_member_grade_info
			--  where ds = '20190920') mgi on so.member_grade_code = mgi.grade_code
			WHERE so.order_type IN ('101', '103')
			OR (so.order_type = '104' AND (so.amt_total != 0 OR (so.amt_total = 0 AND so.qty_order_item != 0)))
			GROUP BY so.channel_endpoint_code
		) order_cnt
			ON sale_amt.channel_endpoint_code = order_cnt.channel_endpoint_code
) avg;


