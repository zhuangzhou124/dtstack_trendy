--***********************************
-- 表   名：ads_api_tpos_ma_store_15mm
-- 功能描述：tpos_ma门店粒度小时、天，周和月周期指标统计
-- 生命周期：3650天
-- 调度周期：15min调度
-- 创建者：  yike
-- 创建日期：20191010
-- 修改日志：
--***********************************
-- drop table ads_api_tpos_ma_store_15mm;
CREATE TABLE IF NOT EXISTS ads_api_tpos_ma_store_15mm(
	biz_date                                     BIGINT COMMENT '统计日期',
	date_type                                    STRING COMMENT '日期类型',
	date_id                                      STRING COMMENT '日期id',
	channel_endpoint_code                        STRING COMMENT '门店列表编码',
	order_type                                   STRING COMMENT '订单类型-写死1，2，3',
	STATUS                                       STRING COMMENT '订单状态-写死11',
	org_code                                     STRING COMMENT '品牌编码',
	sales_amount                                 DOUBLE COMMENT '销售总额未扣券',
	sales_rate                                   DOUBLE COMMENT '销售总额占比（本品牌）',
	sales_sub_coupon_amount                      DOUBLE COMMENT '扣卷销售总额-真实金额',
	sales_sub_coupon_rate                        DOUBLE COMMENT '扣券销售总额占比（本品牌）',
	rank                                         BIGINT COMMENT '销售金额排名',
	order_max_amount                             DOUBLE COMMENT '最大单金额',
	item_quantity                                BIGINT COMMENT '商品数量',
	order_quantity                               BIGINT COMMENT '订单数量',
	average_discount                             DOUBLE COMMENT '平均折扣',
	retail_price_amount                          DOUBLE COMMENT '吊牌价总额',
	per_customer_transaction                     DOUBLE COMMENT '客单价未扣券',
	per_customer_transaction_sub_coupon          DOUBLE COMMENT '客单价扣券',
	associated_purchase_rate                     DOUBLE COMMENT '连带率',
	common_vip_sales_rate                        DOUBLE COMMENT '普通会员未扣券销售占比',
	common_vip_sales_rate_sub_coupon             DOUBLE COMMENT '普通会员扣券销售占比',
	return_sales_amount                          DOUBLE COMMENT '退货金额',
	cash_coupon                                  DOUBLE COMMENT '现金券金额',
	per_item_amount                              DOUBLE COMMENT '件单价未扣券',
	per_item_amount_sub_coupon                   DOUBLE COMMENT '件单价扣券',
	return_item_quantity                         BIGINT COMMENT '退货商品数量',
	rma_order_quantity                           BIGINT COMMENT '退换货单数',
	vip_per_customer_transaction                 DOUBLE COMMENT 'VIP客单价未扣券',
	vip_per_customer_transaction_sub_coupon      DOUBLE COMMENT 'VIP客单价扣券',
	vip_associated_purchase_rate                 DOUBLE COMMENT 'VIP连带率',
	order_amt_vip_sub_coupon                     DOUBLE COMMENT 'VIP销售额扣券',
	order_amt_vip                                DOUBLE COMMENT 'VIP销售额未扣券',
	vip_sales_rate                               DOUBLE COMMENT 'VIP未扣券销售占比',
	vip_sales_rate_sub_coupon                    DOUBLE COMMENT 'VIP扣券销售占比',
	vip_sales_item_quantity                      BIGINT COMMENT 'VIP销售商品数量',
	vip_per_item_amount                          DOUBLE COMMENT 'VIP件单价未扣券',
	vip_per_item_amount_sub_coupon               DOUBLE COMMENT 'VIP件单价扣券',
	vip_order_quantity                           BIGINT COMMENT 'VIP订单数量',
	lasted_project_sales_amount                  DOUBLE COMMENT '最近3波段销售金额',
	lasted_project_sales_rate                    DOUBLE COMMENT '最近3波段销售占比'
)COMMENT '门店销售排行（含券或扣券）' PARTITIONED BY(
	ds STRING
);

INSERT OVERWRITE TABLE ads_api_tpos_ma_store_15mm PARTITION(ds = '${bizdate}')
	SELECT
	CAST('${bizdate}' AS BIGINT）,
	coalesce(date_type, '-110'),
	coalesce(tmpx.date_id, '-110'),
	coalesce(channel_endpoint_code, '-110'),
	'1,2,3',
	'11',
	coalesce(tmpx.org_code, -110),
	before_coupon_amount ,--销售总额（未扣券）
	CASE
	WHEN before_coupon_amount_all <> 0 THEN before_coupon_amount / before_coupon_amount_all
	ELSE 0
	END AS before_coupon_sales_rate ,--未扣券销售占比
	sales_amt,--扣券销售总额/真实金额,
	CASE
	WHEN sale_amt_all <> 0 THEN sales_amt / sale_amt_all
	ELSE 0
	END AS sales_rate,--扣券销售占比,
	rank,
	max_amount,
	item_num,
	order_num,
	avg_discount,
	retail_price,
	before_coupon_per_customer_transaction ,--客单价未扣券,
	per_customer_transaction ,--客单价扣券,
	associated_purchase_rate ,--连带率,
	CASE
	WHEN before_coupon_amount_all <> 0 THEN before_coupon_order_amt_ptvip / before_coupon_amount_all
	ELSE 0
	END AS before_coupon_common_vip_sales_rate--普通会员未扣券销售占比
	,
	CASE
	WHEN sale_amt_all <> 0 THEN order_amt_ptvip / sale_amt_all
	ELSE 0
	END AS common_vip_sales_rate--普通会员扣券销售占比
	,
	return_item_amount
	,
	cash_coupon
	,
	before_coupon_per_item_amount--件单价未扣券
	,
	per_item_amount--件单价扣券
	,
	return_item_qty
	,
	return_order_num
	,
	before_coupon_vip_per_customer_transaction--vip客单价(未扣券)
	,
	vip_per_customer_transaction--vip客单价(扣券)
	,
	vip_associated_purchase_rate--连带率
	,
	order_amt_vip--vip销售额(扣券)
	,
	before_coupon_order_amt_vip--vip销售额（未扣券）
	,
	CASE
	WHEN before_coupon_amount_all <> 0 THEN before_coupon_order_amt_vip / before_coupon_amount_all
	ELSE 0
	END AS before_coupon_vip_sales_rate--vip会员未扣券销售占比
	,
	CASE
	WHEN sale_amt_all <> 0 THEN order_amt_vip / sale_amt_all
	ELSE 0
	END AS vip_sales_rate--vip会员扣券销售占比
	,
	vip_sales_item_qty
	,
	before_coupon_vip_per_item_amount--vip件单价(未扣券)
	,
	vip_per_item_amount--vip件单价(扣券)
	,
	vip_order_num
	,
	lastedProjectSalesAmount--最近三波段销售额
	,
	'null'--最近三波段销售额占比
	FROM (
		SELECT
		date_type
		,
		date_id
		,
		org_code --品牌
		,
		channel_endpoint_code--门店
		,
		avg_discount--平均折扣
		,
		sales_amt--销售额(扣券)
		,
		before_coupon_amount--销售额(未扣券)
		,
		max_amount--最大单金额
		,
		before_coupon_max_amount--最大单金额（扣券）
		,
		item_num--商品件数
		,
		order_num--订单数量
		,
		retail_price--吊牌价总额
		,
		cash_coupon--现金券
		,
		CASE
		WHEN order_num <> 0 THEN before_coupon_amount / order_num
		ELSE 0
		END AS before_coupon_per_customer_transaction--客单价(未扣券)
		,
		CASE
		WHEN order_num <> 0 THEN sales_amt / order_num
		ELSE 0
		END AS per_customer_transaction--客单价(扣券)
		,
		CASE
		WHEN order_num <> 0 THEN item_num / order_num
		ELSE 0
		END AS associated_purchase_rate--连带率
		,
		CASE
		WHEN item_num <> 0 THEN before_coupon_amount / item_num
		ELSE 0
		END AS before_coupon_per_item_amount--件单价(未扣券)
		,
		CASE
		WHEN item_num <> 0 THEN sales_amt / item_num
		ELSE 0
		END AS per_item_amount--件单价(扣券)
		--退货相关
		,
		return_item_amount--退货金额
		,
		return_item_qty--退货商品数量
		,
		return_order_num --退换货单数
		--普通会员系列
		,
		order_amt_ptvip--普通会员销售金额
		,
		before_coupon_order_amt_ptvip--未扣券普通会员销售金额
		--vip会员系列
		,
		order_amt_vip--vip销售额(扣券)
		,
		before_coupon_order_amt_vip--vip销售额（未扣券）
		,
		vip_order_num--vip订单数
		,
		vip_sales_item_qty--vip销售件数
		,
		CASE
		WHEN vip_order_num <> 0 THEN before_coupon_order_amt_vip / vip_order_num
		ELSE 0
		END AS before_coupon_vip_per_customer_transaction--vip客单价(未扣券)
		,
		CASE
		WHEN vip_order_num <> 0 THEN order_amt_vip / vip_order_num
		ELSE 0
		END AS vip_per_customer_transaction--vip客单价(扣券)
		,
		CASE
		WHEN vip_order_num <> 0 THEN vip_sales_item_qty / vip_order_num
		ELSE 0
		END AS vip_associated_purchase_rate--连带率
		,
		CASE
		WHEN vip_sales_item_qty <> 0 THEN before_coupon_order_amt_vip / vip_sales_item_qty
		ELSE 0
		END AS before_coupon_vip_per_item_amount--vip件单价(未扣券)
		,
		CASE
		WHEN vip_sales_item_qty <> 0 THEN order_amt_vip / vip_sales_item_qty
		ELSE 0
		END AS vip_per_item_amount--vip件单价(扣券)

		--开窗做分母的数据字段
		,
		sum(sales_amt)OVER (PARTITION BY date_type, date_id, org_code) AS sale_amt_all--本品牌总销售额（供所有类型销售额占比使用）
		,
		sum(before_coupon_amount)OVER (PARTITION BY date_type, date_id, org_code) AS before_coupon_amount_all
		--本品牌未扣券总销售额（供所有类型销售额占比使用）

		--门店销售额排行
		,
		dense_rank()OVER (PARTITION BY date_type, date_id ORDER BY sales_amt DESC) AS rank


		FROM (
			SELECT  a.org_code
			,
							tmp2.date_type
			,
							tmp2.date_id
			,
							a.channel_endpoint_code
			,
							CASE
							WHEN sum(b.price_retail * b.qty_product) <> 0 THEN sum(b.price_sales * b.qty_product) / sum(b.price_retail
							* b.qty_product)
							ELSE 0
							END AS avg_discount --平均折扣
			--总体销售
			,
							coalesce(COUNT(DISTINCT CASE
							WHEN a.order_type = '101' OR (a.order_type = '104' AND a.amt_total > 0) THEN a.sales_order_no
							END), 0) -
							coalesce(COUNT(DISTINCT CASE
							WHEN a.order_type IN ('102', '103') THEN a.sales_order_no
							END), 0) AS order_num --订单数
			,
							sum(coalesce(b.price_sales * b.qty_product, 0) - coalesce(c.amt_cash_coupon_contribution, 0)) AS sales_amt
			--销售金额（扣券）
			,
							sum(b.price_sales * b.qty_product) AS before_coupon_amount  --销售金额（未扣券）
			,
							sum(CASE
							WHEN b.price_sales <> 0 THEN b.qty_product
							ELSE 0
							END) AS item_num   --销售件数
			--最大单销售
			,
							max(b.price_sales * b.qty_product) AS before_coupon_max_amount--最大单金额(未扣券)
			,
							max(coalesce(b.price_sales * b.qty_product, 0) - coalesce(c.amt_cash_coupon_contribution, 0)) AS
							max_amount  --最大单金额（扣券）
			--普通会员销售
			,
							sum(CASE
							WHEN d.is_vip != 1 THEN coalesce(b.price_sales * b.qty_product, 0) - coalesce(c.
							amt_cash_coupon_contribution, 0)
							ELSE 0
							END) AS order_amt_ptvip --普通会员销售金额（扣券）
			,
							sum(CASE
							WHEN d.is_vip != 1 THEN b.price_sales * b.qty_product
							ELSE 0
							END) AS before_coupon_order_amt_ptvip --普通会员销售金额（未扣券）
			--vip销售
			,
							coalesce(COUNT(DISTINCT CASE
							WHEN d.is_vip = 1 AND (a.order_type = '101' OR (a.order_type = '104' AND a.amt_total > 0)) THEN a.
							sales_order_no
							END), 0) -
							coalesce(COUNT(DISTINCT CASE
							WHEN d.is_vip = 1 AND a.order_type IN ('102', '103') THEN a.sales_order_no
							END), 0) AS vip_order_num --vip订单数
			,
							sum(CASE
							WHEN d.is_vip = 1 THEN coalesce(b.price_sales * b.qty_product, 0) - coalesce(c.
							amt_cash_coupon_contribution, 0)
							ELSE 0
							END) AS order_amt_vip --vip销售金额（扣券）
			,
							sum(CASE
							WHEN d.is_vip = 1 THEN b.price_sales * b.qty_product
							ELSE 0
							END) AS before_coupon_order_amt_vip --vip销售金额（未扣券）
			,
							sum(CASE
							WHEN d.is_vip = 1 AND b.price_sales <> 0 THEN b.qty_product
							ELSE 0
							END) AS vip_sales_item_qty --VIP销售件数
			--退货相关
			,
							sum(CASE
							WHEN a.order_type = 103 THEN coalesce(b.price_sales * b.qty_product, 0) - coalesce(c.
							amt_cash_coupon_contribution, 0)
							ELSE 0
							END) AS return_item_amount --退货金额

			,
							COUNT(DISTINCT CASE
							WHEN a.order_type IN ('103', '104') THEN a.sales_order_no
							END) AS return_order_num --退换货单数
			,
							sum(CASE
							WHEN a.order_type = 103 THEN b.qty_product
							ELSE 0
							END) AS return_item_qty --退货件数
			--吊牌价+现金券
			,
							sum(b.price_retail * b.qty_product) AS retail_price  --零售价(吊牌价)
			,
							sum(c.amt_cash_coupon_contribution) AS cash_coupon  --现金券
			FROM ods_sales_order a
				INNER JOIN (
					SELECT date_type,
								 date_id,
								 time_id
					FROM td_ads_dev.dim_time
					WHERE ds <= '${bizdate}'
					GROUP BY date_type, date_id, time_id
				) tmp2
					ON to_char(CAST(a.paid_time AS DATETIME), 'yyyymmdd') = tmp2.time_id
				INNER JOIN ods_sales_order_item b
					ON a.sales_order_no = b.sales_order_no AND b.ds = '${bizdate}'
				INNER JOIN ods_sales_order_item_price c
					ON b.sales_order_item_no = c.sales_order_item_no AND c.ds = '${bizdate}'
				LEFT JOIN ods_member_grade_info d
					ON a.member_grade_code = d.grade_code AND d.ds = '${bizdate}'
			WHERE a.ds = '${bizdate}' AND order_status = 1
			AND a.business_type IN ('10103', '10104', '10202', '10203', '10302', '10303', '10403', '10404')
			GROUP BY a.org_code
			, a.channel_endpoint_code
			, tmp2.date_type
			, tmp2.date_id
		) tmp
	) tmpx
		LEFT JOIN (
		--去最近三个波段的sku关联拿到指定订单的销售金额
			SELECT
			a.store_code,
			a.org_code,
			sum(a.amt_total) AS lastedProjectSalesAmount,--最近10个波段的销售数据
			a.date_id
			FROM (
				SELECT
				rs_r.store_code,
				oso.org_code,
				oso.sales_order_no,--到订单粒度
				osoi.sku_code,
				osoi.price_sales * osoi.qty_product AS amt_total,
				REPLACE(substr(oso.paid_time, 1, 10), '-', '') AS date_id
				FROM ods_sales_order oso
					INNER JOIN ods_sales_order_item osoi
						ON oso.sales_order_no = osoi.sales_order_no
					JOIN ods_real_store rs_r
						ON oso.channel_endpoint_code = rs_r.store_code AND rs_r.ds = '${bizdate}'
				WHERE oso.ds = '${bizdate}' AND osoi.ds = '${bizdate}'
				AND oso.business_type IN ('10103', '10104', '10202', '10203', '10302', '10303', '10403', '10404')
			) a
				JOIN (
					SELECT sku_code
					FROM (
						SELECT store_code,
									 org_code,
									 CASE
									 WHEN ranking <= 10 THEN sku_code
									 END AS sku_code--最近三个波段销售的sku
						FROM (
							SELECT
							rs_r.store_code,
							osr.org_code,
							osi.sku_code,
							REPLACE(ops.list_date, '-', ''),--通过渠道库存id关联拿到商品SKU再拿到波段和上市日期
							ops.band,--波段
							dense_rank()OVER (PARTITION BY osr.channel_endpoint_code ORDER BY REPLACE(ops.list_date, '-', '') DESC) AS
							ranking
							FROM ods_stock_channel_terminal_rel osr
								LEFT JOIN ods_stock_channel_items osi
									ON osr.stock_channel_id = osi.stock_channel_id
								LEFT JOIN ods_api_item_sku ops
									ON osi.sku_code = ops.sku_code
								JOIN ods_real_store rs_r
									ON osr.channel_endpoint_code = rs_r.store_code AND rs_r.ds = '${bizdate}'
							WHERE osr.ds = '${bizdate}' AND osi.ds = '${bizdate}' AND ops.ds = '${bizdate}'
						) T0
					) T
					WHERE sku_code IS NOT NULL
					GROUP BY sku_code
				) b
					ON a.sku_code = b.sku_code
			GROUP BY a.store_code, a.org_code, a.date_id
		)e
			ON e.date_id = tmpx.date_id AND e.org_code = tmpx.org_code AND e.store_code = tmpx.channel_endpoint_code;















