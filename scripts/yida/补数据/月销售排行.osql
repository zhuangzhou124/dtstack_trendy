--name:月销售排行
--author:zhangjunda
--create time:2019-10-14 18:38
CREATE TABLE IF NOT EXISTS ads_api_tpos_tdrp_wfx_clerk_d(

  biz_month                                            STRING COMMENT '统计月份',
  org_code                                             STRING COMMENT '品牌编号',
  channel_endpoint_code                                STRING COMMENT '门店编号',
  rank_no                                              BIGINT COMMENT '排名',
  clerk_no                                             STRING COMMENT '工号',
  clerkName                                            STRING COMMENT '姓名',
  sale_amt                                             DOUBLE COMMENT '销售售出',
  order_num                                            BIGINT COMMENT '销售单数',
  average_discount                                     DOUBLE COMMENT '平均折扣',
  per_customer_transaction                             DOUBLE COMMENT '客单价',
  associated_purchase_rate                             DOUBLE COMMENT '连带率',
  vip_sales_rate                                       DOUBLE COMMENT 'vip消费占比',
  cash_coupon                                          DOUBLE COMMENT '现金券',
  target_month                                         DOUBLE COMMENT '当月销售目标',
  target                                               DOUBLE COMMENT '目标达成率',
  target_no                                            BIGINT COMMENT '目标达成率排名',
  biz_date                                             STRING COMMENT '统计日期'
)COMMENT '月销售排行 ' PARTITIONED BY(
  ds  STRING);






INSERT OVERWRITE TABLE td_ads_dev.ads_api_tpos_tdrp_wfx_clerk_d PARTITION(ds = '20190101')
  SELECT 'month'
  ,      substr(date_id, 1, 6) AS date_id
  ,      t1.org_code
  ,      coalesce(t1.channel_endpoint_code, '-110')
  ,      dense_rank()OVER (PARTITION BY date_id, t1.org_code, t1.channel_endpoint_code ORDER BY salesAmount DESC) AS rank_no
  ,      coalesce(t1.clerk_no, '-110')
  ,      t2.clerk_name AS cleck_name
  ,      salesAmount
  ,      orderQuantity
  ,      averageDiscount
  ,      perCustomerTransaction
  ,      associatedPurchaseRate
  ,      vipSalesRate
  ,      cashCoupon
  ,      target_amount
  ,      CASE WHEN salesAmount != 0 and target_amount != 0 THEN round(salesAmount / target_amount, 4) ELSE 0 END AS
         target
  ,      dense_rank()OVER (PARTITION BY date_id, t1.org_code, t1.channel_endpoint_code
  ORDER BY CASE WHEN salesAmount != 0 and target_amount != 0 THEN round(salesAmount / target_amount, 4) ELSE 0 END DESC)
         AS target_no
  ,      cast('${bizdate}' as bigint)
  FROM (
    SELECT org_code
    ,      channel_endpoint_code
    ,      coalesce(a.shopping_guider_no, b.clerk_no) AS clerk_no
    ,      coalesce(b.store_monthly_sales_analyze_no) AS store_monthly_sales_analyze_no
    ,      b.target_time AS target_time
    ,      date_id
    ,      coalesce(b.target_amount, 0) AS target_amount
    ,      coalesce(a.salesAmount, 0) AS salesAmount
    ,      coalesce(a.orderQuantity, 0) AS orderQuantity
    ,      coalesce(a.averageDiscount, 0) AS averageDiscount
    ,      coalesce(a.perCustomerTransaction, 0) AS perCustomerTransaction
    ,      coalesce(a.associatedPurchaseRate, 0) AS associatedPurchaseRate
    ,      coalesce(a.vipSalesRate, 0) AS vipSalesRate
    ,      coalesce(a.cashCoupon, 0) AS cashCoupon
    FROM (
      SELECT date_type
      ,      date_id
      ,      org_code
      ,      channel_endpoint_code
      ,      shopping_guider_no
      ,      salesAmount
      ,      orderQuantity
      ,
             CASE WHEN salesAmount != 0 and price_amt_retail != 0 THEN round(salesAmount / price_amt_retail, 4) ELSE 0 END
             AS averageDiscount
      ,      CASE WHEN salesAmount != 0 and orderQuantity != 0 THEN round(salesAmount / orderQuantity, 4) ELSE 0 END AS
             perCustomerTransaction
      ,      CASE WHEN itemQuantity != 0 and orderQuantity != 0 THEN round(itemQuantity / orderQuantity, 4) ELSE 0 END AS
             associatedPurchaseRate
      ,      CASE WHEN vipSalesAmount != 0 and salesAmount != 0 THEN round(vipSalesAmount / salesAmount, 4) ELSE 0 END AS
             vipSalesRate
      ,      cashCoupon
      FROM (
        SELECT date_type
        ,      date_id
        ,      so.org_code
        ,      so.channel_endpoint_code
        ,      so.shopping_guider_no
        ,      coalesce(sum(soi.price_sales * soi.qty_product), 0) - coalesce(sum(soip.amt_cash_coupon_contribution), 0)
               AS salesAmount
        ,      sum(CASE WHEN soi.price_discount <> 0 OR soi.qty_product <> 0 THEN soi.qty_product END) AS itemQuantity
        ,
               sum(CASE WHEN so.order_type = '101' THEN 1 WHEN so.order_type IN ('102', '103') THEN - 1 WHEN so.order_type = '104' AND so.amt_total > 0 THEN 1 WHEN so.order_type = '104' AND so.amt_total = 0 THEN 0 END)
               AS orderQuantity
        ,      sum(so.price_amt_retail) AS price_amt_retail
        ,      coalesce(sum(CASE WHEN mgi.is_vip = '1' THEN soi.price_sales * soi.qty_product END), 0) -
        coalesce(sum(CASE WHEN mgi.is_vip = '1' THEN soip.amt_cash_coupon_contribution END), 0) AS vipSalesAmount
        ,      coalesce(sum(soip.amt_cash_coupon_contribution), 0) AS cashCoupon
        FROM (
          SELECT *
          FROM td_ods_dev.ods_sales_order a1
            JOIN (
              SELECT max(ds1), date_type, date_id, time_id
              FROM td_ads_dev.dim_time
              WHERE ds >= '${start}' AND ds <= '${end}' AND date_type = 'month'
              group by date_type, date_id, time_id
            ) time ON to_char(to_date(paid_time, 'yyyy-mm-dd hh:mi:ss'), 'yyyymmdd') = time.time_id
          WHERE a1.ds = '${bizdate}' AND order_status = 1 AND shopping_guider_no IS NOT NULL
          --AND paid_time = substr('20191025', 1, 6)
        ) so
          INNER JOIN (
            SELECT *
            FROM td_ods_dev.ods_sales_order_item
            WHERE ds = '${bizdate}'
          ) soi ON soi.sales_order_no = so.sales_order_no
          INNER JOIN (
            SELECT *
            FROM td_ods_dev.ods_sales_order_item_price
            WHERE ds = '${bizdate}'
          ) soip ON soip.sales_order_item_no = soi.sales_order_item_no
          LEFT JOIN (
            SELECT *
            FROM td_ods_dev.ods_member_grade_info
            WHERE ds = '${bizdate}'
          ) mgi ON so.member_grade_code = mgi.grade_code
        GROUP BY date_type
        , date_id
        , so.org_code
        , so.channel_endpoint_code
        , so.shopping_guider_no
      ) a
    ) a
      left OUTER JOIN (
        SELECT store_monthly_sales_analyze_no
        ,      store_code
        ,      concat(YEAR, '-', MONTH) AS target_time
        ,      clerk_no
        ,      target_amount
        FROM td_ods_dev.ods_clerk_monthly_sales_analyze
        WHERE ds = '${bizdate}' AND clerk_no IS NOT NULL
      ) b ON a.shopping_guider_no = b.clerk_no and a.channel_endpoint_code=b.store_code AND
      REPLACE(target_time, '-', '') = substr(date_id, 1, 6)
  ) t1
    left JOIN (
      SELECT *
      FROM (
        SELECT *, row_number()OVER (PARTITION BY clerk_no, channel_endpoint_code ORDER BY last_update_time DESC) AS rank
        FROM td_ods_dev.ods_clerk_info
        WHERE ds = '${bizdate}' and  status=7
      ) a
      WHERE rank = 1
    ) t2 ON t1.clerk_no = t2.clerk_no and t1.channel_endpoint_code=t2.channel_endpoint_code;


